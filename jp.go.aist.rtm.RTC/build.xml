<project name="OpenRTM-aist-1.1.0" default="jar">
	<property name="version" value="1.1.0"/>
	<property name="target.name" value="OpenRTM-aist-1.1.0"/>

	<property name="source" value="src"/>
	<property name="source.sdo" value="src/_SDOPackage"/>
	<property name="source.sdotemp" value="src/_SDOPackageTemp"/>
	<property name="source.rtc" value="src/RTC"/>
	<property name="source.rtctemp" value="src/RTCTemp"/>
	<property name="source.rtm" value="src/RTM"/>
	<property name="source.rtmtemp" value="src/RTMTemp"/>
	<property name="source.openrtm" value="src/OpenRTM"/>
	<property name="source.openrtmtemp" value="src/OpenRTMTemp"/>
	<property name="source.examples" value="src/RTMExamples"/>
	<property name="source.examplestemp" value="src/RTMExamplesTemp"/>
	<property name="source.main" value="src/jp"/>
	<property name="source.common" value="src/jp/go/aist/rtm"/>
	<property name="source.sunorb" value="src/jp/go/aist/ForSunOrb"/>
	<property name="source.jacorb" value="src/jp/go/aist/ForJacOrb"/>
	<property name="source.samples.class" value="bin/RTMExamples"/>
	<property name="source.samples.java" value="src/RTMExamples"/>
	<property name="source.samples.java.SimpleService" value="${source.samples.java}/SimpleService"/>
	<property name="source.samples.java.AutoTest" value="${source.samples.java}/AutoTest"/>
	<property name="source.test" value="tests/src"/>
	<property name="source.tests.bind" value="${source.test}/jp/go/aist/rtm/bind"/>
	<property name="source.rtcd" value="src/rtcd"/>
	<property name="source.rtcprof" value="src/rtcprof"/>

	<property name="dist.dir" value="jar" />
	<property name="dist.samples" value="installer/resources/Source/examples/RTMExamples"/>
	<property name="dist.bat" value="installer/resources/Source/examples/"/>
	
	<property name="distribution.dir" value="C:/distribution/" />
	<property name="build.dir" value="bin"/>
	<property name="build.dir.test" value="tests/bin"/>
	<property name="build.doc" value="installer/resources/Source/JavaDoc"/>
	<property name="build.doc.us" value="installer/resources/Source/JavaDocEn"/>
	<property name="build.doc.jp" value="installer/resources/Source/JavaDocJa"/>
	<property name="build.dir.jar" value="installer/resources/Source/jar" />
	<property name="build.dir.rtcd" value="bin/rtcd" />
	<property name="build.dir.prof" value="bin/rtcprof" />

	<property name="installer.dir" value="installer/resources" />
	<property name="installer.script" value="installer/commands/genwxs.vbs" />
	<property environment="env"/>
	<!--	
	<property name="wix.dir" value="C:/Wix" />
	-->
	<property name="wix.dir" value="${env.WIX_HOME}" />

	<property name="idl.path" value="idl" />
	<property name="idl.path.tests" value="tests/idl" />
	<property name="idl.Manager" value="${idl.path}/Manager.idl" />
	<property name="idl.OpenRTM" value="${idl.path}/OpenRTM.idl" />
	<property name="idl.DataPort" value="${idl.path}/DataPort.idl" />
	<property name="idl.BasicDataType" value="${idl.path}/BasicDataType.idl" />
	<property name="idl.ExtendedDataTypes" value="${idl.path}/ExtendedDataTypes.idl" />
	<property name="idl.InterfaceDataTypes" value="${idl.path}/InterfaceDataTypes.idl" />
	<property name="idl.ComponentObserver" value="${idl.path}/ComponentObserver.idl" />
	<property name="idl.test.CorbaConsumer" value="${idl.path.tests}/CorbaConsumer/Hello.idl" />
	<property name="idl.test.CorbaPort" value="${idl.path.tests}/CorbaPort/MyService.idl" />
	<property name="idl.test.TypeCast" value="${idl.path.tests}/TypeCast/Mock.idl" />
	<property name="idl.sample" value="${source.samples.java}/MyService.idl" />
	<property name="idl.autotest" value="${source.samples.java}/AutoTestService.idl" />
	
	<property name="dir.jsmooth" value="${env.JSMOOTH_HOME}"/>
	<property name="util.source" value="util"/>


	<target name="buildAll">
	<taskdef name="jsmoothgen"
	classname="net.charabia.jsmoothgen.ant.JSmoothGen"
	classpath="${dir.jsmooth}/lib/jsmoothgen-ant.jar"/>
		<antcall target="idlCompile" />
		<antcall target="idlCompileEtc" />
		<antcall target="clean" />
		<antcall target="compile" />
		<antcall target="jar" />
		<antcall target="javaExamples" />
		<antcall target="createExe" />
		<antcall target="javaDoc" />
		<antcall target="javaInstaller" />
		<antcall target="dist" />
	</target>
	
        <target name="buildAllLinux">
		<antcall target="idlCompile" />
		<antcall target="idlCompileEtc" />
		<antcall target="clean" />
		<antcall target="compile" />
		<antcall target="jar" />
		<antcall target="javaExamples" />
		<antcall target="javaDoc" />
	</target>
	
        <target name="buildAllAndroid">
		<antcall target="idlCompile" />
		<antcall target="idlCompileEtc" />
		<antcall target="clean" />
		<antcall target="compile_android" />
		<antcall target="jar" />
		<antcall target="javaExamples" />
		<antcall target="javaDoc" />
	</target>

        <target name="buildTests">
		<antcall target="idlCompile" />
		<antcall target="idlCompileEtc" />
		<antcall target="clean" />
		<antcall target="compile" />
		<antcall target="jar" />
		<antcall target="javaExamples" />
		<antcall target="compile_tests" />
		<antcall target="junit" />
	</target>

	<target name="jar" description="jarファイルを作成します">
		<mkdir dir="${dist.dir}" />
		<delete file="${dist.dir}/${target.name}.jar" />

		<jar destfile="${dist.dir}/${target.name}.jar"
			 basedir="${build.dir}"
			 excludes="RTMExamples/**, rtcd/**, rtcprof/**" />

		<delete file="${build.dir.jar}/${target.name}.jar" />
		<copy file="${dist.dir}/${target.name}.jar" todir="${build.dir.jar}" />
		<jar destfile="${dist.dir}/rtcd.jar"
			 basedir="${build.dir}"
			 includes="rtcd/**" />
		<delete file="${build.dir.jar}/rtcd.jar" />
		<copy file="${dist.dir}/rtcd.jar" todir="${build.dir.jar}" />

		<jar destfile="${dist.dir}/rtcprof.jar"
			 basedir="${build.dir}"
                         manifest="${source.rtcprof}/META-INF/MANIFEST.MF"
			 includes="rtcprof/**" />
		<delete file="${build.dir.jar}/rtcprof.jar" />
		<copy file="${dist.dir}/rtcprof.jar" todir="${build.dir.jar}" />
	</target>

	<target name="javaExamples"  description="Sampleをコピーします">
		<delete dir="${dist.samples}" />
		
		<copy todir="${dist.samples}">
			<fileset dir="${source.samples.class}" />
			<fileset dir="${source.samples.java}" />
		</copy>
	</target>

	<target name="createExe" description="exeファイルを作成します">
		<delete file="rtcd.jsmooth" />
		<copy file="rtcd.jsmooth.in" tofile="rtcd.jsmooth"/>
		<replace file="rtcd.jsmooth" token="@version@" 
			value="${version}" />
		<taskdef name="jsmoothgen"
		classname="net.charabia.jsmoothgen.ant.JSmoothGen"
		classpath="${dir.jsmooth}/lib/jsmoothgen-ant.jar"/>
		<jsmoothgen project="rtcd.jsmooth"
			skeletonroot="${dir.jsmooth}/skeletons"/>
		<copy file="rtcd_java.exe" todir="${dist.bat}" />
		<delete file="rtcd_java.exe" />
	</target>
	<target name="javaDoc" description="JavaDocを作成します">
		<delete dir="${build.doc}" />
		<delete dir="${build.doc.jp}" />
		<delete dir="${build.doc.us}" />
		<delete>
			<fileset dir="${util.source}" includes="*.class" />
		</delete>
		<javac srcdir="${util.source}" destdir="${util.source}" 
			encoding="Shift-JIS" />
		<mkdir dir="${build.doc}" />
		<javadoc 
                        Locale="ja_JP"
			packagenames="jp.go.aist.rtm.*,jp.go.aist.rtm.RTC.*,_SDOPackage.*,RTC.*,OpenRTM.*,RTM.*" 
                        sourcepath="${source}" destdir="${build.doc}"
                        encoding="UTF-8"
                        docencoding="UTF-8"
			author="true" doctitle="OpenRTM-aist Java" 
			nodeprecated="false" nodeprecatedlist="false" 
                        noindex="false" nonavbar="false" notree="false" 
			package="yes" source="1.5" splitindex="true" 
                        use="true" version="true" charset="UTF-8"
                        >
                        <taglet name="JaOnTaglet" path="./util"/>
                        <taglet name="EnOffTaglet"  path="./util"/>
                </javadoc>
		<mkdir dir="${build.doc.us}" />
		<javadoc 
                        Locale="en_US"
			packagenames="jp.go.aist.rtm.*,jp.go.aist.rtm.RTC.*,_SDOPackage.*,RTC.*,OpenRTM.*,RTM.*" 
                        sourcepath="${source}" destdir="${build.doc.us}"
                        encoding="UTF-8"
                        docencoding="UTF-8"
			author="true" doctitle="OpenRTM-aist Java" 
			nodeprecated="false" nodeprecatedlist="false" 
                        noindex="false" nonavbar="false" notree="false" 
			package="yes" source="1.5" splitindex="true" 
                        use="true" version="true" charset="UTF-8"
                        >
                        <taglet name="EnOnTaglet"  path="./util"/>
                        <taglet name="JaOffTaglet"  path="./util"/>
                </javadoc>
	</target>

	<target name="javaInstaller"  description="インストーラを作成します">
		<!-- copy idl files -->
		<mkdir dir="installer/resources/Source/rtm_java/idl" />
		<mkdir dir="installer/resources/Source/rtm_java/idl/device_interfaces" />
		<copy todir="installer/resources/Source/rtm_java/idl">
			<fileset dir="idl" />
		</copy>
		<copy todir="installer/resources/Source/rtm_java/idl/device_interfaces">
			<fileset dir="idl/device_interfaces" />
		</copy>
		<!-- コマンド実行 -->		
		<exec dir="installer/win32" executable="cmd">
			<arg value="/c cleanup.cmd"/>
		</exec>
		<!-- フォルダ削除 -->
		<delete dir="${distribution.dir}/OpenRTM-aist-Java-${version}" />
		<!-- フォルダ生成 -->		
		<mkdir dir="${distribution.dir}/OpenRTM-aist-Java-${version}" />
		<mkdir dir="${distribution.dir}/OpenRTM-aist-Java-${version}/Source" />
		<!-- 情報コピー -->
		<copy todir="${distribution.dir}/OpenRTM-aist-Java-${version}/Source">
			<fileset dir="installer/resources/Source" />
		</copy>

		<!-- コマンド実行 -->		
		<exec dir="installer/win32" executable="cmd">
			<arg value="/c build.cmd"/>
		</exec>
	</target>

	<target name="idlCompile" description="IDLファイルをコンパイルします">
		<delete dir="src/_SDOPackage" />
		<delete dir="src/RTC" />
		<delete dir="src/OpenRTM" />
		<delete dir="src/RTM" />
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.Manager}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.OpenRTM}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.DataPort}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.BasicDataType}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.ExtendedDataTypes}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.InterfaceDataTypes}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -i ${idl.path} -emitAll ${idl.ComponentObserver}"/>
		</exec>
	</target>

	<target name="idlCompileEtc" description="IDLファイル(追加分)をコンパイルします">
		<delete dir="${source.tests.bind}" />
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source.test} -pkgPrefix CorbaConsumer jp.go.aist.rtm.bind ${idl.test.CorbaConsumer}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source.test} -pkgPrefix CorbaPort jp.go.aist.rtm.bind ${idl.test.CorbaPort}"/>
		</exec>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source.test} -pkgPrefix TypeCast jp.go.aist.rtm.bind ${idl.test.TypeCast}"/>
		</exec>
		<delete includeEmptyDirs="true">
			<fileset dir="${source.samples.java.SimpleService}" excludes="**.idl,MyServiceConsumer**.java,MyServiceProvider**.java,MyServiceSVC_impl.java,rtc.conf" />
		</delete>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -pkgPrefix SimpleService RTMExamples ${idl.sample}"/>
		</exec>
		<delete includeEmptyDirs="true">
			<fileset dir="${source.samples.java.AutoTest}" excludes="**.idl,AutoTest**.java,MyServiceSVC_impl.java,**.conf" />
		</delete>
		<exec executable="${java.home}\..\bin\idlj">
			<arg line="-v -fall -td ${source} -pkgPrefix AutoTest RTMExamples ${idl.autotest}"/>
		</exec>
	</target>

	<target name="clean" description="ビルドで生成されたファイルを削除します">
		<delete includeEmptyDirs="true">
			<fileset dir="${build.dir}" includes="**/*.class" />
			<fileset dir="${build.dir.test}" includes="**/*.class" />
		</delete>
	</target>

	<target name="compile" description="ソースをコンパイルします">
		<native2ascii encoding="UTF-8" src="${source.sdo}" dest="${source.sdotemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.sdo}">
		    <fileset dir="${source.sdotemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.sdotemp}" />
		<native2ascii encoding="UTF-8" src="${source.rtc}" dest="${source.rtctemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.rtc}">
		    <fileset dir="${source.rtctemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.rtctemp}" />
		<native2ascii encoding="UTF-8" src="${source.rtm}" dest="${source.rtmtemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.rtm}">
		    <fileset dir="${source.rtmtemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.rtmtemp}" />
		<native2ascii encoding="UTF-8" src="${source.openrtm}" dest="${source.openrtmtemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.openrtm}">
		    <fileset dir="${source.openrtmtemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.openrtmtemp}" />
		<javac srcdir="${source.sdo}:${source.rtc}:${source.rtm}:${source.openrtm}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar" encoding="UTF-8" />
		<javac srcdir="${source.main}:${source.rtcd}:${source.rtcprof}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar"  encoding="UTF-8"  includes="go/aist/**" excludes="go/aist/ForSunOrb/**,go/aist/ForJacOrb/**"  />
		<delete dir="${source.examplestemp}" />
		<native2ascii encoding="UTF-8" src="${source.examples}" dest="${source.examplestemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
	        <fixcrlf srcdir="${source.examplestemp}" eol="crlf" >
	            <include name="**/*.java" />
	        </fixcrlf>
		<copy todir="${source.examples}">
		    <fileset dir="${source.examplestemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.examplestemp}" />
		<javac srcdir="${source.examples}:" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar"  encoding="UTF-8" />
		<native2ascii encoding="UTF-8" src="${source.sdo}" dest="${source.sdotemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.sdo}">
		    <fileset dir="${source.sdotemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.sdotemp}" />
		<native2ascii encoding="UTF-8" src="${source.rtc}" dest="${source.rtctemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.rtc}">
		    <fileset dir="${source.rtctemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.rtctemp}" />
		<native2ascii encoding="UTF-8" src="${source.rtm}" dest="${source.rtmtemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.rtm}">
		    <fileset dir="${source.rtmtemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.rtmtemp}" />
		<native2ascii encoding="UTF-8" src="${source.openrtm}" dest="${source.openrtmtemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.openrtm}">
		    <fileset dir="${source.openrtmtemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.openrtmtemp}" />
		<javac srcdir="${source.sdo}:${source.rtc}:${source.rtm}:${source.openrtm}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar" encoding="UTF-8" />
		<copy todir="${source.common}" overwrite="true">
		    <fileset dir="${source.sunorb}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<javac srcdir="${source.main}:${source.rtcd}:${source.rtcprof}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar"  encoding="UTF-8" includes="go/aist/**" excludes="go/aist/ForSunOrb/**,go/aist/ForJacOrb/**"  />
		<delete dir="${source.examplestemp}" />
		<native2ascii encoding="UTF-8" src="${source.examples}" dest="${source.examplestemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
	        <fixcrlf srcdir="${source.examplestemp}" eol="crlf" >
	            <include name="**/*.java" />
	        </fixcrlf>
		<copy todir="${source.examples}">
		    <fileset dir="${source.examplestemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.examplestemp}" />
		<javac srcdir="${source.examples}:" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar"  encoding="UTF-8" />
	</target>

	<target name="compile_android" description="ソースをコンパイルします">
		<native2ascii encoding="UTF-8" src="${source.sdo}" dest="${source.sdotemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.sdo}">
		    <fileset dir="${source.sdotemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.sdotemp}" />
		<native2ascii encoding="UTF-8" src="${source.rtc}" dest="${source.rtctemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.rtc}">
		    <fileset dir="${source.rtctemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.rtctemp}" />
		<native2ascii encoding="UTF-8" src="${source.rtm}" dest="${source.rtmtemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.rtm}">
		    <fileset dir="${source.rtmtemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.rtmtemp}" />
		<native2ascii encoding="UTF-8" src="${source.openrtm}" dest="${source.openrtmtemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
		<copy todir="${source.openrtm}">
		    <fileset dir="${source.openrtmtemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.openrtmtemp}" />
		<javac srcdir="${source.sdo}:${source.rtc}:${source.rtm}:${source.openrtm}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:/usr/local/JacORB/lib/jacorb.jar:" encoding="UTF-8" />
		<copy todir="${source.common}" overwrite="true" >
		    <fileset dir="${source.jacorb}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<javac srcdir="${source.main}:${source.rtcd}:${source.rtcprof}" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:/usr/local/JacORB/lib/jacorb.jar:"  encoding="UTF-8"  includes="go/aist/**" excludes="go/aist/ForSunOrb/**,go/aist/ForJacOrb/**" />
		<delete dir="${source.examplestemp}" />
		<native2ascii encoding="UTF-8" src="${source.examples}" dest="${source.examplestemp}" >
	            <include name="**/*.java" />
	        </native2ascii>
	        <fixcrlf srcdir="${source.examplestemp}" eol="crlf" >
	            <include name="**/*.java" />
	        </fixcrlf>
		<copy todir="${source.examples}">
		    <fileset dir="${source.examplestemp}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<delete dir="${source.examplestemp}" />
		<copy todir="${source.common}"  overwrite="true">
		    <fileset dir="${source.jacorb}" >
		        <include name="**/*.java" />
		    </fileset>
		</copy>
		<javac srcdir="${source.examples}:" destdir="${build.dir}" classpath="lib/commons-cli-1.1.jar:/usr/local/JacORB/lib/jacorb.jar:"  encoding="UTF-8"  includes="go/aist/**" excludes="go/aist/ForSunOrb/**,go/aist/ForJacOrb/**" />
	</target>

	<target name="compile_tests" description="ソースをコンパイルします">
		<javac srcdir="${source.sdo}:${source.rtc}:${source.rtm}:${source.openrtm}:${source.main}:${source.examples}:${source.test}:${source.tests.bind}" destdir="${build.dir.test}" classpath="lib/commons-cli-1.1.jar:${env.JUNIT_HOME}/junit.jar:" encoding="UTF-8" />
	</target>

	<target name="junit" description="junit ソースをコンパイルします">
		<mkdir dir="${build.dir.test}/reports" />
		<delete dir="${build.dir.test}/reports/*.xml" />
		<delete dir="${build.dir.test}/reports/*.txt" />
		<junit haltonfailure="No" >
			<formatter type="xml" usefile="true" />
			<classpath>
				<pathelement path="bin:${env.JUNIT_HOME}/junit:${env.JUNIT_HOME}/junit/samples:${env.JUNIT_HOME}:${env.ANT_HOME}:${build.dir.test}:lib/commons-cli-1.1.jar"/>
				<pathelement location="${env.JUNIT_HOME}/junit.jar"/>
				<pathelement location="${env.ANT_HOME}/lib/ant-junit.jar"/>
			</classpath>
			<!--
			<test name="jp.go.aist.rtm.RTC.FactoryTest"/>
			<test name="jp.go.aist.rtm.RTC.StateMachineTests"/>
			-->
			<batchtest todir="${build.dir.test}/reports">
				<fileSet dir="${build.dir.test}">
					<include name="jp/go/aist/rtm/RTC/*Test.class" />
					<include name="jp/go/aist/rtm/RTC/*Tests.class" />
					<include name="jp/go/aist/rtm/RTC/**/*Test.class" />
					<include name="jp/go/aist/rtm/RTC/**/*Tests.class" />
					<exclude name="jp/go/aist/rtm/RTC/SampleTest.class" />
				</fileSet>
			</batchtest>
		</junit>
		<echo>All Test complete!</echo>
	</target>
	<target name="dist" description="ソースをエクスポートします">
		<delete dir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />
		<mkdir dir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />
		<delete file="${dist.dir}/source/OpenRTM-aist-Java-${version}.zip" />
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}/src" >
			<fileset dir="src" />
		</copy>
<!--
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}/tests" >
			<fileset dir="tests" />
		</copy>
-->
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}/idl" >
			<fileset dir="idl" />
		</copy>
		<copy file=".project" todir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />
		<copy file=".classpath" todir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />
		<zip destfile="${dist.dir}/source/OpenRTM-aist-Java-${version}.zip" basedir="${dist.dir}/source/OpenRTM-aist-Java-${version}" />



		<delete dir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/0.4" />
		<delete dir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/1.0" />
		<delete dir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/1.1" />
		<mkdir dir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/1.1" />
		<delete file="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar.zip" />
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/1.1/jar" >
			<fileset dir="installer/resources/Source/jar">
				<include name="rtcd.jar" />
				<include name="rtcprof.jar" />
				<include name="*${version}.jar" />
				<include name="commons-cli-1.1.jar" />
			</fileset>
			<fileset dir="installer/win32">
				<include name="License.txt" />
			</fileset>
		</copy>
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/1.1/examples" >
			<fileset dir="installer/resources/Source/examples">
				<include name="*.exe" />
				<include name="*.bat" />
				<include name="*.sh" />
				<include name="*.vbs" />
			</fileset>
		</copy>
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/1.1/examples/RTMExamples" >
			<fileset dir="installer/resources/Source/examples/RTMExamples" />
		</copy>
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/1.1/JavaDoc" >
			<fileset dir="installer/resources/Source/JavaDoc" />
		</copy>
		<copy todir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar/OpenRTM-aist/1.1/JavaDocEn" >
			<fileset dir="installer/resources/Source/JavaDocEn" />
		</copy>
		<zip destfile="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar.zip" basedir="${dist.dir}/source/OpenRTM-aist-Java-${version}-jar" />
		<delete file="${dist.dir}/source/OpenRTM-aist-Java-${version}-RELEASE.tar.gz" />
		<tar destfile="${dist.dir}/source/OpenRTM-aist-Java-${version}-RELEASE.tar.gz" 
			basedir="../" 
			compression="gzip" 
			excludes="jp.go.aist.rtm.RTC/installer/**, 
				jp.go.aist.rtm.RTC/jar/source/**, 
				jp.go.aist.rtm.RTC/Source/**, 
				jp.go.aist.rtm.RTC/build_org.xml, 
				jp.go.aist.rtm.RTC/jcoverage.ser, 
				buildRTC.bat, buildRTC.sh, clean.bat, 
				clean.sh, cmd.bat, **/*.swp" />

	</target>
</project>
